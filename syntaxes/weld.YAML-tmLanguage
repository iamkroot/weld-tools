name: Weld IR
patterns:
- include: '#bindings'
- include: '#comments'
- include: '#keywords'
- include: '#strings'
- include: '#literals'
- include: '#operators'
- include: '#types'
repository:
  bindings:
    patterns:
    - comment: variable declaration
      begin: \b(let)\s*(\{)?
      end: ((\})?\s*(=)|;)
      beginCaptures:
        '1':
          name: keyword.weld
        '2':
          name: punctuation.section.brackets
      endCaptures:
        '2':
          name: punctuation.section.brackets
        '3':
          name: keyword.operator.assignment.weld
        '4':
          name: punctuation.terminator.weld
      patterns:
      - match: \b([_a-zA-Z][_0-9a-zA-Z]*)\s*(,)?
        captures:
          '1':
            name: variable.other.weld
          '2':
            name: punctuation.separator.sequence
      - begin: ':'
        beginCaptures:
          '1':
            name: punctuation.accessor.colon.weld
        end: (?==)
        patterns:
        - include: '#types'
    - include: '#cudf'
  comments:
    patterns:
    - begin: '#'
      end: \n
      name: comment.line
  cudf:
    match: \b(cudf)\s*(\[)(\w+)(,)\s*(.*)(\])\((.*)\)
    captures:
      '1':
        name: keyword.weld
      '2':
        name: punctuation.definition.generic.begin
      '3':
        name: variable.function.weld
      '4':
        name: punctuation.separator.key-value
      '5':
        name: support.type.weld
      '6':
        name: punctuation.definition.generic.end
  keywords:
    patterns:
    - comment: keyword
      match: \b(for|if|select|iterate|result|merge)\b
      name: keyword.control.weld
    - match: \b(macro|zip)\b
      name: keyword.weld
    - match: \b(appender|merger|dictmerger|groupmerger|vecmerger)
      name: support.function
  literals:
    patterns:
    - comment: boolean literal
      match: \b(true|false)\b
      name: constant.language.boolean.weld
    - comment: floating point decimal literal with exponent
      match: \b(\d+(\.\d*)?[eE][+-]?\d+[g-zG-Z]?)\b
      name: constant.numeric.decimal.float.weld
    - comment: floating point decimal literal
      match: \b(\d+)(\.\d*[g-zG-Z]?\b|\.)
      name: constant.numeric.decimal.float.weld
    - comment: floating point hexadecimal literal with exponent part
      match: \b((0x|0X)\h+(\.\h*)?[pP][+-]?\d+[g-zG-Z]?)\b
      name: constant.numeric.hexadecimal.float.weld
    - comment: floating point hexadecimal literal
      match: \b((0x|0X)\h+)(\.\h*[g-zG-Z]?\b|\.)
      name: constant.numeric.hexadecimal.float.weld
    - comment: decimal integer literal
      match: \b(\d+[cClLng-zG-Z]?|(si))\b
      name: constant.numeric.decimal.integer.weld
  operators:
    patterns:
    - comment: binding operator
      match: \b(let|and)[$&*+\-\/=>@^|<][!?$&*+\-\/=>@^|%:]*
      name: keyword.weld
    - comment: infix symbol
      match: '[$&*+\-\/=>@^%<][~!?$&*+\-\/=>@^|%<:.]*'
      name: keyword.operator.weld
    - comment: infix symbol
      match: '#[~!?$&*+\-\/=>@^|%<:.]+'
      name: keyword.operator.weld
    - comment: prefix symbol
      match: '![~!?$&*+\-\/=>@^|%<:.]*'
      name: keyword.operator.weld
    - comment: prefix symbol
      match: '[?~][~!?$&*+\-\/=>@^|%<:.]+'
      name: keyword.operator.weld
    - comment: named operator
      match: \b(exp|log|sqrt|sin|cos|tan|asin|acos|atan|sinh|cosh|tanh|erf)\b
      name: keyword.operator.weld
    - comment: type annotation
      match: ':'
      name: keyword.other.weld punctuation.other.colon punctuation.colon
    - comment: field accessor
      match: \.$
      name: keyword.other.weld punctuation.other.period punctuation.separator.period
    - comment: semicolon separator
      match: ;
      name: keyword.other.weld punctuation.separator.terminator punctuation.separator.semicolon
    - comment: comma separator
      match: ','
      name: keyword.other.weld punctuation.comma punctuation.separator.comma
  strings:
    begin: '"'
    end: '"'
    name: string.quoted.double.weld
    patterns:
    - match: \\.
      name: constant.character.escape.weld
  types:
    patterns:
    - comment: builtin type
      match: \b(bool|i8|u8|i16|u16|i32|u32|i64|u64|f32|f64|str)\b
      name: support.type.weld
    - comment: builtin compound type
      begin: \b(simd|vec|dict)\s*(\[)
      beginCaptures:
        '1':
          name: support.class.weld
        '2':
          name: punctuation.definition.generic.begin
      end: (\])
      endCaptures:
        '1':
          name: punctuation.definition.generic.end
      patterns:
      - include: '#types'
      - match: ','
        name: keyword.other.weld punctuation.comma punctuation.separator.comma

scopeName: source.weld
